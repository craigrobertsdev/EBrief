npx tailwindcss -i .\wwwroot\css\app.css -o .\wwwroot\css\output.css --watch

FUNCTIONALITY:
	- Work out logging
		* Add logging to all catch blocks
		* Add logging to data access 
		* Add logging to file service
	- Search function for case files by either case file or courtfile number or defendant
	- Find a way to handle where files are double clicked when the user already has the app open
		https://www.codeproject.com/Articles/5247406/Double-Clicking-a-File-in-Explorer-and-Adding-It-t
	- Handle situation where there is no network connection, so the updates will need to be sent later when its back
		* research the outbox pattern
	- Use cancellation tokens to cancel requesting both court lists and documents
	- Add all courts to the list of court	
	- Think of a way to represent regional courts where they only have 1 court room
	- Implement OAuth2
	    * If the user's credentials change while the application is open (ie they make a request and get an unauthorised error code, they should be prompted to log in again
	- Add auth tokens and use them to send requests and populate user data for CFEL updates:
		* CasefileEnquiryLogEntry constructor needs to accept a user rather than a string
		* Follow ups page needs to be updated to use the user
	- Templates for court updates
		* Add the judicial officer and some template text like "COURT UPDATE" in an editable text field so every entry can be quickly started for prosecutors to do an update.
		* If admin are coming to court to assist with court lists, they should be provided with the same court list 
			so they can do updates to CFELs. 
		* Follow up tasks should be able to be created for the prosecutor they 
			are in court with so that work can be assigned directly to the prosecutor who will do the work at a later date.

	- Add court jurisdiction information and highlight when a matter should be considered for adjournment to the correct jurisdiction

	- If a user changes their credentials (ie password is updated), they are prompted to log in again
	
	- Save an email or document to multiple casefiles at once
	- Create a link from the offender to their NCIS record

	- Remove ID hack from parser. This is to allow defendants to have different ids by the time they reach the database so more than 1 defendant has case files against them

	- Improve resiliency for adding documents to evidence and correspondence pages when there is an error.

	- Clear error message on add casefiles dialog when closing it

	- Refresh throws an error when there is an addition in the list. App cannot recover from this state even after restarting.
	- Work out why there are so many entires for each defendant in the database
		* Adding a casefile adds double the number of defendants when called

UI:
	- Case files and other scrolling documents should have the ability to be opened in a pop-out screen 
		that takes up most of/all of the screen for easier reading.
	- Add the ability to zoom in and out.

	- When deleting a court list, pressing escape when the confirm dialog is open then reopening the "LoadPreviousCourtList" dialog shows an incorrect state.
		* Can't now replicate this.

STYLING:
	- Add colour coding for whether notes have been added to the case file
	- Go through every date and time and format them consistently
	- When expanding a court session, make scroll snap to the botton of the newly opened session, or as far down as possible if the session is too long
	- OpenPreviousCourtList - create grid for each element of CourtListEntry (date, court code, court room)
	- Colour palette!
	- Defendants from custody have the (C) appended to the end of their first name. This should be removed
	
TESTING:
	- Add tests for models and data access where it makes sense
	- Check that DotNetObjectReferences are being disposed of correctly

NICE TO HAVES:
	- Keyboard shortcuts
	- Help popup with shortcuts and other info
	- Progress indicator when getting data from the server
