@inject IJSRuntime JSRuntime
@implements IDisposable

<div dropdown-btn class="float-right relative text-sm laptop:text-base">
    <Button Class="rounded-none dropdown-btn py-2 text-sm laptop:text-base" @onclick=@(ToggleDropdown)>
        @Text
    </Button>

    <div id="dropdown" class="@(IsOpen ? "block" : "hidden") absolute right-0 z-10 bg-white w-max shadow-menu rounded-md py-2">
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string Text { get; set; } = default!;
    private bool IsOpen { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("addDropdownClickHandler", objRef);
    }

    internal async Task ToggleDropdown()
    {
        var isOpen = await JSRuntime.InvokeAsync<bool>("dropdownIsOpen");
        IsOpen = !isOpen;
    }

    [JSInvokable]
    public void Close()
    {
        IsOpen = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        Task.Run(() => JSRuntime.InvokeVoidAsync("removeDropdownClickHandler"));
    }
}
