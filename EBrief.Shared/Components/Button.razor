<button id="@Id" type="@Type" class="@style @Class px-3 border rounded-md text-lg select-none @(loading || Disabled ? disabled : "")"
        @onclick=@HandleClick
        disabled="@(Disabled || loading)">
    @if (loading)
    {
        <div class="text-gray-400 h-[30px] w-[30px]">
            <img src="images/loading_spinner.svg" class="h-full w-full object-contain" />
        </div>
    }
    else
    {
        @ChildContent
    }
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public ButtonTypes Variant { get; set; } = ButtonTypes.Submit;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Type { get; set; } = string.Empty;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Id { get; set; } = string.Empty;

    private bool loading = false;

    private string style => Variant switch
    {
        ButtonTypes.Submit => "bg-blue text-primary hover:bg-blue-hover",
        ButtonTypes.Cancel => "bg-gray-300 text-black hover:bg-gray-400",
        ButtonTypes.Add => "bg-jade text-white hover:bg-jade-hover",
        ButtonTypes.Open => "bg-turquoise text-primary hover:bg-turquoise-hover",
        ButtonTypes.Close => "bg-ceramic text-primary hover:bg-peach-hover",
        ButtonTypes.Delete => "bg-transparent text-red-500 border border-red-500 hover:bg-red-500 hover:text-text",
        ButtonTypes.Tab => "bg-gray-200 text-black hover:bg-gray-300",
        ButtonTypes.TabActive => "bg-blue text-primary hover:bg-blue-hover",
        _ => "bg-blue text-primary hover:bg-blue-hover"
    };

    private string disabled => Variant switch
    {
        ButtonTypes.Delete => "text-gray-300! border-gray-300! hover:text-gray-300! hover:bg-transparent!",
        _ => "bg-gray-300! hover:bg-gray-300!"
    };

    private async Task HandleClick()
    {
        loading = true;
        await OnClick.InvokeAsync();
        loading = false;
    }

}

