@using EBrief.Shared.Components
@using EBrief.Shared.Helpers
@using EBrief.Shared.Models.Shared
@using EBrief.Shared.Models.UI
@using System.IO
@using EBrief.Shared.Services
@implements IDisposable

<div class="flex h-full">
    @if (Parent.ActiveDefendant?.ActiveCasefile?.OccurrenceDocuments.Count == 0)
    {
        <p>No evidence to display</p>
    }
    else if (Parent.ActiveDefendant?.ActiveCasefile?.EvidenceLoaded == false)
    {
        <div>
            <p>No documents loaded for this court list</p>
            <Button Variant="ButtonTypes.Add" OnClick="LoadDocuments">
                Load Evidence
            </Button>
        </div>
    }
    else
    {
        <div class="row-span-2 flex flex-col pr-2 mr-2 overflow-y-auto w-40 laptop:w-56">
            @foreach (var document in Parent.ActiveDefendant?.ActiveCasefile?.OccurrenceDocuments!)
            {
                <div class="text-md laptop:text-base p-1 max-h-[6rem] overflow-hidden border border-slate-500 cursor-pointer @IsSelected(document)" 
                @onclick=@(() => SelectDocument(document)) title="@document.Title">
                    @document.Title
                </div>
            }
        </div>
        <div class="flex-1">
            <iframe src=@PdfContent style="height: 100%; width: 100%;" />
        </div>
    }
</div>

@code {
    [CascadingParameter] public ICourtListPage Parent { get; set; } = default!;
    [Inject] HttpService HttpService { get; set; } = default!;

    private Document? SelectedDocument { get; set; }
    private string? PdfContent { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (Parent.ActiveDefendant?.ActiveCasefile?.EvidenceLoaded == false)
        {
            return;
        }

        await HandleDefendantChange();
        Parent.OnDefendantChanged += HandleDefendantChange;
    }

    private async Task HandleDefendantChange()
    {
        var file = Parent.ActiveDefendant?.ActiveCasefile?.SelectedOccurrenceDocument ??
            Parent.ActiveDefendant?.ActiveCasefile?.OccurrenceDocuments.FirstOrDefault();
        if (file != null)
        {
            await SelectDocument(file);
            StateHasChanged();
        }
    }

    private async Task SelectDocument(Document document)
    {
        SelectedDocument = Parent!.ActiveDefendant!.ActiveCasefile!.OccurrenceDocuments.FirstOrDefault(d => d.FileName == document.FileName);
        Parent!.ActiveDefendant!.ActiveCasefile!.SelectedOccurrenceDocument = SelectedDocument;
        await LoadDocument(document.FileName);
    }

    private async Task LoadDocument(string fileName)
    {
        using var fileStream = new FileStream($"{FileHelpers.AppDataPath}/documents/{fileName}", FileMode.Open, FileAccess.Read);
        var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        var fileExtension = Path.GetExtension(fileName).ToLowerInvariant();
        var mimeType = FileHelpers.GetMimeType(fileExtension);
        PdfContent = $"data:{mimeType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

    private string IsSelected(Document document)
    {
        if (SelectedDocument?.FileName == document.FileName)
        {
            return "bg-sky-700 text-white";
        }

        return "bg-slate-200 text-black";
    }

    private async Task LoadDocuments()
    {
        await HttpService.DownloadEvidence(Parent.ActiveDefendant!.ActiveCasefile!);
        Parent.ActiveDefendant!.ActiveCasefile!.EvidenceLoaded = true;
        await HandleDefendantChange();
    }

    public void Dispose()
    {
        Parent.OnDefendantChanged -= HandleDefendantChange;
        SelectedDocument = null;
        GC.Collect();
    }
}