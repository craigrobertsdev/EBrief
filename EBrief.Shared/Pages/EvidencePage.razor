@using EBrief.Shared.Helpers
@using EBrief.Shared.Models.UI
@implements IDisposable

<div class="flex flex-grow">
    @if (Parent.ActiveDefendant?.ActiveCaseFile?.OccurrenceDocuments.Count == 0) {
        <p>No correspondence to display</p>
    }
    else {
        <div class="row-span-2 flex flex-col pr-2 mr-2 border-r border-r-3 border-r-slate-500 overflow-y-auto">
            @foreach (var document in Parent.ActiveDefendant?.ActiveCaseFile?.OccurrenceDocuments!) {
                <div class="text-sm lg:text-lg p-1 max-h-[6rem] overflow-hidden border border-slate-500 cursor-pointer @IsSelected(document)" @onclick=@(() => SelectDocument(document))>
                    @document.Title
                </div>
            }
        </div>
        <div class="flex-1">
            <iframe src=@_pdfContent style="height: 100%; width: 100%;" />
        </div>
    }
</div>

@code {
    [CascadingParameter] public CourtListPage Parent { get; set; } = default!;
    public OccurrenceDocument? SelectedDocument { get; set; }
    private string _pdfContent = "";

    protected override async Task OnInitializedAsync() {
        await HandleDefendantChange();
        Parent.OnDefendantChange += HandleDefendantChange;
    }

    private async Task HandleDefendantChange() {
        var file = Parent.ActiveDefendant?.ActiveCaseFile?.SelectedOccurrenceDocument ?? 
            Parent.ActiveDefendant?.ActiveCaseFile?.OccurrenceDocuments.First();
        if (file != null) {
            await SelectDocument(file);
        }
    }

    private async Task SelectDocument(OccurrenceDocument document) {
        SelectedDocument = Parent!.ActiveDefendant!.ActiveCaseFile!.OccurrenceDocuments.FirstOrDefault(d => d.Title == document.Title);
        Parent!.ActiveDefendant!.ActiveCaseFile!.SelectedOccurrenceDocument = SelectedDocument;
        await LoadDocument(document.FileName);
    }

    private async Task LoadDocument(string fileName) {
        using var fileStream = new FileStream($"{FileHelpers.AppDataPath}/evidence/{fileName}", FileMode.Open, FileAccess.Read);
        var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        var fileExtension = Path.GetExtension(fileName).ToLowerInvariant();
        var mimeType = FileHelpers.GetMimeType(fileExtension);
        _pdfContent = $"data:{mimeType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

    private string IsSelected(OccurrenceDocument document) {
        if (SelectedDocument?.FileName == document.FileName) {
            return "bg-sky-700 text-white";
        }

        return "bg-slate-200 text-black";
    }

    public void Dispose() {
        Parent.OnDefendantChange -= HandleDefendantChange;
        SelectedDocument = null;
        GC.Collect();
    }
}