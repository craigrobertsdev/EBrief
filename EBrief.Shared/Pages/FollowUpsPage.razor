@using EBrief.Shared.Data
@using EBrief.Shared.Models
@using EBrief.Shared.Models.Shared
@using EBrief.Shared.Models.UI
@using EBrief.Shared.Services
@using Radzen
@using Radzen.Blazor
@implements IDisposable

<div class="flex flex-col flex-grow gap-6 pb-4">
    @* Case file selectors *@
    <div>
        <h3 class="text-lg pb-2">Select case files to update</h3>
        <RadzenCheckBoxList Data="Casefiles" @bind-Value=@SelectedCasefiles TextProperty="CasefileNumber" AllowSelectAll="true"
        SelectAllText="Select all" ValueProperty="CasefileNumber" Orientation="Orientation.Horizontal"
        Style="font-weight: bold;" />
    </div>

    @* Create task section *@
    <div class="pb-4">
        @* Should be a flex box with the text section and case files side-by-side *@
        <h3 class="text-lg pb-2">Create follow up task</h3>
        <textarea placeholder="Enter task remarks here..." @bind=Parent.ActiveDefendant!.ActiveCasefile!.FollowUpText
        class="block resize-none mb-2 w-3/4 p-2 border border-black" rows="10" />
        <RadzenButton Text="Create follow up task" />
    </div>

    @* CFEL section *@
    <div>
        <h3 class="text-lg pb-2">Enter text to add to all selected case files' CFELs</h3>
        <textarea name="cfel-entry" id="cfel-entry" @bind="@Parent.ActiveDefendant!.AddCfelText"
        class="block resize-none mb-2 w-3/4 p-2 border border-black" rows="10" />
        <div class="flex gap-6 items-center">
            <RadzenButton Text="Update CFELs" Click="HandleAddCfelEntry" />
            @if (_error is not null)
            {
                <p class="text-red-500">@_error</p>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public ICourtListPage Parent { get; set; } = default!;
    [Inject] IDataAccess DataAccess { get; set; } = default!;
    [Inject] HttpService _httpService { get; set; } = default!;
    private string? RemarksText { get; set; }
    private string? CfelText { get; set; }
    private IEnumerable<string> SelectedCasefiles { get; set; } = [];
    private List<Casefile> Casefiles { get; set; } = [];
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        Parent.OnDefendantChange += HandleDefendantChange;
        await HandleDefendantChange();
    }

    public async Task HandleDefendantChange()
    {
        await Task.CompletedTask;
        if (Parent?.ActiveDefendant?.Casefiles is not null)
        {
            Casefiles = Parent.ActiveDefendant.Casefiles;
        }
    }

    public void Dispose()
    {
        Casefiles = null!;
        SelectedCasefiles = null!;
        Parent.OnDefendantChange -= HandleDefendantChange;
    }

    private async Task HandleAddCfelEntry()
    {
        _error = null;
        if (SelectedCasefiles.Count() == 0)
        {
            _error = "No case files selected";
            return;
        }

        if (string.IsNullOrWhiteSpace(Parent.ActiveDefendant!.AddCfelText))
        {
            _error = "No text entered";
            return;
        }

        var casefiles = Parent.ActiveDefendant!.Casefiles.Where(cf => SelectedCasefiles.Contains(cf.CasefileNumber));
        if (casefiles is null)
        {
            _error = "No case files found";
            return;
        }

        foreach (var casefile in casefiles)
        {
            casefile.Cfel.Add(new(Parent.ActiveDefendant.AddCfelText, "Craig Roberts"));
        }

        await DataAccess.UpdateCfels(SelectedCasefiles, Parent.ActiveDefendant.AddCfelText);
        await _httpService.UpdateCasefileLogs(SelectedCasefiles, Parent.ActiveDefendant.AddCfelText);
        Parent.ActiveDefendant.AddCfelText = string.Empty;
    }
}